# -*- coding: utf-8 -*-
"""cat-vs-dog-CNN_model.ipynb

#Automatically generated by Colaboratory.

#Original file is located at
    https://colab.research.google.com/drive/1I3yi9Dbo7KX9FsvvfKfJmXP4ooGnV8wx
"""

# steps to download datasetv directly from kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

# unzip file
import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Flatten,Conv2D,MaxPooling2D

#generators
train_ds = keras.utils.image_dataset_from_directory(
    directory='/content/train',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory='/content/test',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

# noramlization(we will covert data into 0 and 1)
def process(image,label):
  image = tf.cast(image/255. ,tf.float32)
  return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

# create CNN model
model = Sequential()

# 1st convolution layer
model.add(Conv2D(32,kernel_size=(3,3),padding="valid",activation="relu",input_shape=(256,256,3)))
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding="valid"))

# 2nd convolution layer
model.add(Conv2D(64,kernel_size=(3,3),padding="valid",activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding="valid"))

# 3rd convolution layer
model.add(Conv2D(128,kernel_size=(3,3),padding="valid",activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding="valid"))

# faltten output
model.add(Flatten())

#1st dense layer
model.add(Dense(128,activation="relu"))

#2nd dense layer
model.add(Dense(64,activation="relu"))

#3rd dense layer
model.add(Dense(1,activation="sigmoid"))

model.summary()

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

history = model.fit(train_ds,epochs=10,validation_data=validation_ds)

import matplotlib.pyplot as plt
plt.plot(history.history["val_accuracy"],color="red",label="validation")
plt.plot(history.history["accuracy"],color="green",label="train")

plt.legend()
plt.show()

